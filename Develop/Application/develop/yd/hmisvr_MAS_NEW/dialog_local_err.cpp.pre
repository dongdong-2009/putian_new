#include "dialog_local_err.h"
#include "ui_dialog_local_err.h"
#include "globalhmi.h"

dialog_local_err::dialog_local_err(QWidget *parent) :
    QDialog(parent),
    ui(new Ui::dialog_local_err)
{
    ui->setupUi(this);
}

dialog_local_err::~dialog_local_err()
{
    delete ui;
}

int local_errsum = 0;

int local_errsum_flag,local_errsum_flag_2,local_errsum_flag_3;
int local_errsum_temp,local_errsum_temp_2,local_errsum_temp_3;

int local_pagenum_all=0;;
int local_page_number=0;
int local_pagenum_temp=0;

char local_tempsub2_buf[30][50]={0};
int local_tempadd_sub2 = 0;

char local_temperr_array[50] = {0};

#define  LOCAL_ERR_FILE  "/usr/data/warning.txt"
struct  _partbuf_0x97 local_array_errfile[500]={0};

int Err_localfile_analysis(const char *file_name, struct _partbuf_0x97  *partbuf_0x97_OutPt);
int Err_local_analysis(int error_state_flag);

void dialog_local_err::changeEvent(QEvent *e)
{
    QDialog::changeEvent(e);
    switch (e->type()) {
    case QEvent::LanguageChange:
        ui->retranslateUi(this);
        break;
    default:
        break;
    }
}


void dialog_local_err::init_page_dlg()
{
    timer = new QTimer(this);
    connect(timer,SIGNAL(timeout()),this,SLOT(timer_handle()));
    timer->start(PAGE_FLUSH_TIMER);
    init_page_val();
}

void dialog_local_err::init_page_val()
{
    ui->label_stubnum->setText(QString::fromUtf8("桩编号："));
    ui->label_phone->setText(QString::fromUtf8("客服热线："));
    ui->label_code->setText(code);
    ui->label_num1->setText(phonenum);
    ui->label_num2->setText(phonenum_2);
    UINT8 data = NO_BUTTON;
    API_Write_DB_Nbyte(PL_HMI_BUTTON_DOWN,(INT8 *)(&data),sizeof(data));

    ui->frame_2->move(36,800);

    llbl_num=1;
    llbl_num_2=2;
    llbl_num_3=3;
    llbl_num_4=4;
    llbl_num_5=5;

    /*
        故障序号: 发生的序号
    */
    local_errsum = Err_localfile_analysis(LOCAL_ERR_FILE,local_array_errfile);

    if(local_errsum > 0)
    {

        if(local_errsum >= 3)
        {
             lbl_num  =local_errsum ;    //71
             lbl_num_2=local_errsum - 1; //70
             lbl_num_3=local_errsum - 2; //69
        }else if(local_errsum == 2)
        {
             lbl_num  =local_errsum ;
             lbl_num_2=local_errsum - 1;
        }
        else if(local_errsum == 1)
        {
             lbl_num  =local_errsum ;
        }else{

        }


        //总页数
        local_pagenum_all = local_errsum/3;    //7条 ， 3页
        local_pagenum_temp = local_errsum%3;
        if(local_pagenum_temp > 0)
        {
            local_pagenum_all++;
        }
        //当前页数
        local_page_number = (local_errsum/3 + 1) - (lbl_num/3); //3 - 2
        ui->label_pagenum->setNum(local_page_number);
        ui->label_pagenum_all->setNum(local_pagenum_all);

        memcpy(&time,&local_array_errfile[local_errsum - lbl_num].OccurTm,sizeof(SYNCHRO_TIME_S));
        memcpy(&time_2,&local_array_errfile[local_errsum - lbl_num_2].OccurTm,sizeof(SYNCHRO_TIME_S));
        memcpy(&time_3,&local_array_errfile[local_errsum - lbl_num_3].OccurTm,sizeof(SYNCHRO_TIME_S));

        err_code = local_array_errfile[local_errsum - lbl_num].errcode;
        err_code_2 = local_array_errfile[local_errsum - lbl_num_2].errcode;
        err_code_3 = local_array_errfile[local_errsum - lbl_num_3].errcode;
        //printf("************ err_code=%x **********\n",err_code);

        //&local_tempsub2_buf[0] 存了第一条故障记录的第一个故障
        memset(local_tempsub2_buf,0,sizeof(local_tempsub2_buf));
        local_tempadd_sub2 = 0;
        Err_local_analysis(err_code);
        memcpy(lbl_txt, &local_tempsub2_buf[0],sizeof(local_tempsub2_buf[local_errsum - lbl_num]));
        ui->label_txt_6->setText(QString::fromUtf8(lbl_txt));

        memset(local_tempsub2_buf,0,sizeof(local_tempsub2_buf));
        local_tempadd_sub2 = 0;
        Err_local_analysis(err_code_2);
        memcpy(lbl_txt_2,&local_tempsub2_buf[0],sizeof(local_tempsub2_buf[local_errsum - lbl_num_2]));
        ui->label_txt_7->setText(QString::fromUtf8(lbl_txt_2));

        memset(local_tempsub2_buf,0,sizeof(local_tempsub2_buf));
        local_tempadd_sub2 = 0;
        Err_local_analysis(err_code_3);
        memcpy(lbl_txt_3, &local_tempsub2_buf[0],sizeof(local_tempsub2_buf[local_errsum - lbl_num_3]));
        ui->label_txt_8->setText(QString::fromUtf8(lbl_txt_3));


    }
    else
    {

    }
}

void dialog_local_err::start_timer()
{
    timer->start(PAGE_FLUSH_TIMER);
    init_page_val();
}

void dialog_local_err::timer_handle()
{
    update_page_info();
    update_hmi_page_index();
}

void dialog_local_err::update_page_info()
{
    if(local_errsum > 0)
    {
    if(err_code&&(lbl_num > 0))
    {
        ui->label_num->setNum(lbl_num);
        ui->label_txt->setText(itos(time));
        ui->pbtn_more_1->move(640,60);

    }
    else
    {
         ui->label_num->setText(NULL);
         ui->label_txt->setText(NULL);
         ui->pbtn_more_1->move(0,800);

         ui->frame_5->move(0,800);
    }


    if(err_code_2&&(lbl_num_2 > 0))
    {
       ui->label_num_2->setNum(lbl_num_2);
       ui->label_txt_2->setText(itos(time_2));
       ui->pbtn_more_2->move(640,60);
    }
    else
    {
         ui->label_num_2->setText(NULL);
         ui->label_txt_2->setText(NULL);
         ui->pbtn_more_2->move(0,800);

         ui->frame_6->move(0,800);
    }


    if(err_code_3&&(lbl_num_3 > 0))
    {
       ui->label_num_3->setNum(lbl_num_3);
       ui->label_txt_3->setText(itos(time_3));
       ui->pbtn_more_3->move(640,60);

    }
    else
    {
         ui->label_num_3->setText(NULL);
         ui->label_txt_3->setText(NULL);
         ui->pbtn_more_3->move(0,800);

         ui->frame_7->move(0,800);
    }
    }





    if(local_errsum > 0)
    {
#if 0
        // local_tempsub2_buf : 存储50列，30个故障，故为: [30][50]
        // 这里只需要显示一个时间上的一个故障，就显示: local_tempsub2_buf[0]即可；
        memset(local_tempsub2_buf,0,sizeof(local_tempsub2_buf));
        local_tempadd_sub2 = 0;
        Err_local_analysis(err_code);
        memcpy(lbl_txt, &local_tempsub2_buf[0],sizeof(local_tempsub2_buf[local_errsum - lbl_num]));
        ui->label_txt_6->setText(QString::fromUtf8(lbl_txt));

        memset(local_tempsub2_buf,0,sizeof(local_tempsub2_buf));
        local_tempadd_sub2 = 0;
        Err_local_analysis(err_code_2);
        memcpy(lbl_txt_2,&local_tempsub2_buf[0],sizeof(local_tempsub2_buf[local_errsum - lbl_num_2]));
        ui->label_txt_7->setText(QString::fromUtf8(lbl_txt_2));

        memset(local_tempsub2_buf,0,sizeof(local_tempsub2_buf));
        local_tempadd_sub2 = 0;
        Err_local_analysis(err_code_3);
        memcpy(lbl_txt_3, &local_tempsub2_buf[0],sizeof(local_tempsub2_buf[local_errsum - lbl_num_3]));
        ui->label_txt_8->setText(QString::fromUtf8(lbl_txt_3));
#endif

        memcpy(lbl_txt_11, &local_tempsub2_buf[llbl_num-1],sizeof(local_tempsub2_buf[llbl_num-1]));
        memcpy(lbl_txt_12,& local_tempsub2_buf[llbl_num_2-1],sizeof(local_tempsub2_buf[llbl_num_2-1]));
        memcpy(lbl_txt_13, &local_tempsub2_buf[llbl_num_3-1],sizeof(local_tempsub2_buf[llbl_num_3-1]));
        memcpy(lbl_txt_14, &local_tempsub2_buf[llbl_num_4-1],sizeof(local_tempsub2_buf[llbl_num_4-1]));
        memcpy(lbl_txt_15, &local_tempsub2_buf[llbl_num_5-1],sizeof(local_tempsub2_buf[llbl_num_5-1]));

        ui->label_txt_11->setText(QString::fromUtf8(lbl_txt_11));
        ui->label_txt_12->setText(QString::fromUtf8(lbl_txt_12));
        ui->label_txt_13->setText(QString::fromUtf8(lbl_txt_13));
        ui->label_txt_14->setText(QString::fromUtf8(lbl_txt_14));
        ui->label_txt_15->setText(QString::fromUtf8(lbl_txt_15));

        if(lbl_txt_11[0])
        {
            ui->label_num_11->setNum(llbl_num);
        }
        else
        {
            ui->label_num_11->setText(NULL);
        }

        if(lbl_txt_12[0])
        {
            ui->label_num_12->setNum(llbl_num_2);
        }
        else
        {
            ui->label_num_12->setText(NULL);
        }

        if(lbl_txt_13[0])
        {
             ui->label_num_13->setNum(llbl_num_3);
        }
        else
        {
            ui->label_num_13->setText(NULL);
        }

        if(lbl_txt_14[0])
        {
            ui->label_num_14->setNum(llbl_num_4);
        }
        else
        {
            ui->label_num_14->setText(NULL);
        }

        if(lbl_txt_15[0])
        {
            ui->label_num_15->setNum(llbl_num_5);
        }
        else
        {
            ui->label_num_15->setText(NULL);
        }

    }
    else
    {

    }
}

void dialog_local_err::update_hmi_page_index(void)
{
    API_Read_DB_Nbyte(PL_HMI_PAGE_INDEX,(INT8 *)(&hmi_page_index),sizeof(hmi_page_index));
   if(hmi_page_index != PAGEINDEX_LOCAL_ERR)
   {
       exit_page_dlg();
   }
   else
   {

   }
}

void dialog_local_err::exit_page_dlg()
{
    init_page_val();
    timer->stop();
    emit  signal_exit_dlg();
    //delete end_dlg;
    //end_dlg = NULL;
}

//首页
void dialog_local_err::on_pbtn_first_page_clicked()
{
    hmi_button_dn_num=FIRST_PAGE_BUTTON;
    API_Write_DB_Nbyte(PL_HMI_BUTTON_DOWN,(INT8 *)(&hmi_button_dn_num),sizeof(hmi_button_dn_num));

    /*
        故障序号: 发生的序号
    */
    local_errsum = Err_localfile_analysis(LOCAL_ERR_FILE,local_array_errfile);
    if(local_errsum > 0)
    {
        if(local_errsum >= 3)
        {
             lbl_num  =local_errsum ;    //71
             lbl_num_2=local_errsum - 1; //70
             lbl_num_3=local_errsum - 2; //69
        }else if(local_errsum == 2)
        {
             lbl_num  =local_errsum ;
             lbl_num_2=local_errsum - 1;
        }
        else if(local_errsum == 1)
        {
             lbl_num  =local_errsum ;
        }else{

        }


        memcpy(&time,&local_array_errfile[local_errsum - lbl_num].OccurTm,sizeof(SYNCHRO_TIME_S));
        memcpy(&time_2,&local_array_errfile[local_errsum - lbl_num_2].OccurTm,sizeof(SYNCHRO_TIME_S));
        memcpy(&time_3,&local_array_errfile[local_errsum - lbl_num_3].OccurTm,sizeof(SYNCHRO_TIME_S));

        err_code = local_array_errfile[local_errsum - lbl_num].errcode;
        err_code_2 = local_array_errfile[local_errsum - lbl_num_2].errcode;
        err_code_3 = local_array_errfile[local_errsum - lbl_num_3].errcode;

        memset(local_tempsub2_buf,0,sizeof(local_tempsub2_buf));
        local_tempadd_sub2 = 0;
        Err_local_analysis(err_code);
        memcpy(lbl_txt, &local_tempsub2_buf[0],sizeof(local_tempsub2_buf[local_errsum - lbl_num]));
        ui->label_txt_6->setText(QString::fromUtf8(lbl_txt));

        memset(local_tempsub2_buf,0,sizeof(local_tempsub2_buf));
        local_tempadd_sub2 = 0;
        Err_local_analysis(err_code_2);
        memcpy(lbl_txt_2,&local_tempsub2_buf[0],sizeof(local_tempsub2_buf[local_errsum - lbl_num_2]));
        ui->label_txt_7->setText(QString::fromUtf8(lbl_txt_2));

        memset(local_tempsub2_buf,0,sizeof(local_tempsub2_buf));
        local_tempadd_sub2 = 0;
        Err_local_analysis(err_code_3);
        memcpy(lbl_txt_3, &local_tempsub2_buf[0],sizeof(local_tempsub2_buf[local_errsum - lbl_num_3]));
        ui->label_txt_8->setText(QString::fromUtf8(lbl_txt_3));

        //总页数
        local_pagenum_all = local_errsum/3;    //7条 ， 3页
        local_pagenum_temp = local_errsum%3;
        if(local_pagenum_temp > 0)
        {
            local_pagenum_all++;
        }
        //当前页数
        local_page_number = (local_errsum/3 + 1) - (lbl_num/3); //3 - 2
        ui->label_pagenum->setNum(local_page_number);
        ui->label_pagenum_all->setNum(local_pagenum_all);


    }
    else
    {

    }


}

//上一页
void dialog_local_err::on_pbtn_up_clicked()
{
    hmi_button_dn_num=PAGEUP_BUTTON;
    API_Write_DB_Nbyte(PL_HMI_BUTTON_DOWN,(INT8 *)(&hmi_button_dn_num),sizeof(hmi_button_dn_num));

    if(local_errsum > 0)
    {

        if(local_errsum - lbl_num >= 3)
        {
            lbl_num=lbl_num+3;
            lbl_num_2=lbl_num_2+3;
            lbl_num_3=lbl_num_3+3;

            memcpy(&time,&local_array_errfile[local_errsum - lbl_num].OccurTm,sizeof(SYNCHRO_TIME_S));
            memcpy(&time_2,&local_array_errfile[local_errsum - lbl_num_2].OccurTm,sizeof(SYNCHRO_TIME_S));
            memcpy(&time_3,&local_array_errfile[local_errsum - lbl_num_3].OccurTm,sizeof(SYNCHRO_TIME_S));

            err_code = local_array_errfile[local_errsum - lbl_num].errcode;
            err_code_2 = local_array_errfile[local_errsum - lbl_num_2].errcode;
            err_code_3 = local_array_errfile[local_errsum - lbl_num_3].errcode;

            memset(local_tempsub2_buf,0,sizeof(local_tempsub2_buf));
            local_tempadd_sub2 = 0;
            Err_local_analysis(err_code);
            memcpy(lbl_txt, &local_tempsub2_buf[0],sizeof(local_tempsub2_buf[llbl_num-1]));
            ui->label_txt_6->setText(QString::fromUtf8(lbl_txt));

            memset(local_tempsub2_buf,0,sizeof(local_tempsub2_buf));
            local_tempadd_sub2 = 0;
            Err_local_analysis(err_code_2);
            memcpy(lbl_txt_2,& local_tempsub2_buf[0],sizeof(local_tempsub2_buf[llbl_num_2-1]));
            ui->label_txt_7->setText(QString::fromUtf8(lbl_txt_2));

            memset(local_tempsub2_buf,0,sizeof(local_tempsub2_buf));
            local_tempadd_sub2 = 0;
            Err_local_analysis(err_code_3);
            memcpy(lbl_txt_3, &local_tempsub2_buf[0],sizeof(local_tempsub2_buf[llbl_num_3-1]));
            ui->label_txt_8->setText(QString::fromUtf8(lbl_txt_3));
        }
        else
        {

        }

    //总页数
        local_pagenum_all = local_errsum/3;    //7条 ， 3页
        local_pagenum_temp = local_errsum%3;
        if(local_pagenum_temp > 0)
        {
            local_pagenum_all++;
        }
        //当前页数
        local_page_number = (local_errsum/3 + 1) - (lbl_num/3); //3 - 2
        ui->label_pagenum->setNum(local_page_number);
        ui->label_pagenum_all->setNum(local_pagenum_all);

    }
    else
    {

    }
}

//下一页
void dialog_local_err::on_pbtn_down_clicked()
{
    hmi_button_dn_num=PAGEDOWN_BUTTON;
    API_Write_DB_Nbyte(PL_HMI_BUTTON_DOWN,(INT8 *)(&hmi_button_dn_num),sizeof(hmi_button_dn_num));

    if(local_errsum > 0)
    {
        //printf("********* 1 lbl_num = %d*******\n",lbl_num);
        if(lbl_num > 3)
        {
            if(lbl_num - 3 > 0)
            {
                lbl_num  =lbl_num - 3 ;
            }else if(lbl_num > 0)
            {
                local_errsum_flag = 1;
                local_errsum_temp = lbl_num - 3;
                lbl_num =local_errsum + 1;

            }else{
            }

            if(lbl_num_2 - 3 > 0)
            {
                lbl_num_2  =lbl_num_2 - 3 ;
            }else if(lbl_num_2 > 0)
            {
                local_errsum_flag_2 = 1;
                local_errsum_temp_2= lbl_num_2 - 3;
                lbl_num_2  =local_errsum + 1;

            }else{
            }

            if(lbl_num_3 - 3 > 0)
            {
                lbl_num_3  =lbl_num_3 - 3 ;
            }else if(lbl_num_3 > 0)
            {
                local_errsum_flag_3 = 1;
                local_errsum_temp_3= lbl_num_3 - 3;
                lbl_num_3  =local_errsum + 1;

            }else{
            }


        //printf("********* 1 local_errsum = %d*******\n",local_errsum);

        memcpy(&time,&local_array_errfile[local_errsum - lbl_num].OccurTm,sizeof(SYNCHRO_TIME_S));
        memcpy(&time_2,&local_array_errfile[local_errsum - lbl_num_2].OccurTm,sizeof(SYNCHRO_TIME_S));
        memcpy(&time_3,&local_array_errfile[local_errsum - lbl_num_3].OccurTm,sizeof(SYNCHRO_TIME_S));

        err_code = local_array_errfile[local_errsum - lbl_num].errcode;
        err_code_2 = local_array_errfile[local_errsum - lbl_num_2].errcode;
        err_code_3 = local_array_errfile[local_errsum - lbl_num_3].errcode;

        //printf("********* 1 err_code = %d*******\n",err_code);

        memset(local_tempsub2_buf,0,sizeof(local_tempsub2_buf));
        local_tempadd_sub2 = 0;
        Err_local_analysis(err_code);
        memcpy(lbl_txt, &local_tempsub2_buf[0],sizeof(local_tempsub2_buf[llbl_num-1]));
        ui->label_txt_6->setText(QString::fromUtf8(lbl_txt));

        memset(local_tempsub2_buf,0,sizeof(local_tempsub2_buf));
        local_tempadd_sub2 = 0;
        Err_local_analysis(err_code_2);
        memcpy(lbl_txt_2,& local_tempsub2_buf[0],sizeof(local_tempsub2_buf[llbl_num_2-1]));
        ui->label_txt_7->setText(QString::fromUtf8(lbl_txt_2));

        memset(local_tempsub2_buf,0,sizeof(local_tempsub2_buf));
        local_tempadd_sub2 = 0;
        Err_local_analysis(err_code_3);
        memcpy(lbl_txt_3, &local_tempsub2_buf[0],sizeof(local_tempsub2_buf[llbl_num_3-1]));
        ui->label_txt_8->setText(QString::fromUtf8(lbl_txt_3));

        if(local_errsum_flag == 1)
        {
            lbl_num = local_errsum_temp;
            local_errsum_temp = 0;
            local_errsum_flag = 0;
        }

        if(local_errsum_flag_2 == 1)
        {
            lbl_num_2 = local_errsum_temp_2;
            local_errsum_temp_2 = 0;
            local_errsum_flag_2 = 0;
        }
        if(local_errsum_flag_3 == 1)
        {
            lbl_num_3 = local_errsum_temp_3;
            local_errsum_temp_3 = 0;
            local_errsum_flag_3 = 0;
        }

        }
        else
        {
        }

        //总页数
        local_pagenum_all = local_errsum/3;    //7条 ， 3页
        local_pagenum_temp = local_errsum%3;
        if(local_pagenum_temp > 0)
        {
            local_pagenum_all++;
        }
        //当前页数
        local_page_number = (local_errsum/3 + 1) - (lbl_num/3); //3 - 2
        ui->label_pagenum->setNum(local_page_number);
        ui->label_pagenum_all->setNum(local_pagenum_all);


    }
    else
    {

    }
}
void dialog_local_err::on_pbtn_back_clicked()
{
    hmi_button_dn_num=CANCEL_BUTTON;
    API_Write_DB_Nbyte(PL_HMI_BUTTON_DOWN,(INT8 *)(&hmi_button_dn_num),sizeof(hmi_button_dn_num));

    //hmi_page_index=PAGEINDEX_ERR_CHOOSE;
    //API_Write_DB_Nbyte(PL_HMI_PAGE_INDEX,(INT8 *)(&hmi_page_index),sizeof(hmi_page_index));

}

void dialog_local_err::on_pbtn_more_1_clicked()
{
    memset(local_tempsub2_buf,0,sizeof(local_tempsub2_buf));
    local_tempadd_sub2 = 0;
    Err_local_analysis(err_code);
    ui->frame_2->move(0,0);
    //ui->frame_1->move(0,0);

}
void dialog_local_err::on_pbtn_more_2_clicked()
{
    memset(local_tempsub2_buf,0,sizeof(local_tempsub2_buf));
    local_tempadd_sub2 = 0;
    Err_local_analysis(err_code_2);
    ui->frame_2->move(0,0);
    //ui->frame_1->move(30,800);
}
void dialog_local_err::on_pbtn_more_3_clicked()
{
    memset(local_tempsub2_buf,0,sizeof(local_tempsub2_buf));
    local_tempadd_sub2 = 0;
    Err_local_analysis(err_code_3);
    ui->frame_2->move(0,0);
    //ui->frame_1->move(30,800);
}
void dialog_local_err::on_pbtn_back_2_clicked()
{

    memset(local_tempsub2_buf,0,sizeof(local_tempsub2_buf));
    local_tempadd_sub2 = 0;
    Err_local_analysis(err_code);
    memcpy(lbl_txt, &local_tempsub2_buf[0],sizeof(local_tempsub2_buf[local_errsum - lbl_num]));
    ui->label_txt_6->setText(QString::fromUtf8(lbl_txt));

    memset(local_tempsub2_buf,0,sizeof(local_tempsub2_buf));
    local_tempadd_sub2 = 0;
    Err_local_analysis(err_code_2);
    memcpy(lbl_txt_2,&local_tempsub2_buf[0],sizeof(local_tempsub2_buf[local_errsum - lbl_num_2]));
    ui->label_txt_7->setText(QString::fromUtf8(lbl_txt_2));

    memset(local_tempsub2_buf,0,sizeof(local_tempsub2_buf));
    local_tempadd_sub2 = 0;
    Err_local_analysis(err_code_3);
    memcpy(lbl_txt_3, &local_tempsub2_buf[0],sizeof(local_tempsub2_buf[local_errsum - lbl_num_3]));
    ui->label_txt_8->setText(QString::fromUtf8(lbl_txt_3));

    ui->frame_2->move(36,800);
    //ui->frame_1->move(0,0);
}

int Err_localfile_analysis(const char *file_name, struct _partbuf_0x97  *partbuf_0x97_OutPt)
{
    int num_add = 0;
    unsigned char linedatabuf[100] ;
    FILE *fp_file;
    unsigned  int startpos=0;
    //one line total len
    unsigned  int  readLen=0;

    //singal for each split
    unsigned  int Sectionindex=0;
    //store the char for each split
    unsigned char SectionBuf[50];
    //pos for each split
    unsigned  int  SectiondataPos=0;

    //flag for getting the start index of history
    unsigned  int  startInsertFlag=0;
       //insert history count
    unsigned  int  TempInsertCount=0;
    struct _partbuf_0x97 tempWaring ;
    int tempeventtype=0;
    int linetotal=0;
    fp_file = fopen(file_name, "r");
    if(fp_file ==0)//open file error
    {
        perror("open warning.txt: ");
        return 0;
    }
    else
    {
        //printf("open warningfile success\r\n");
    }
    if(partbuf_0x97_OutPt==NULL)
    {
        fclose(fp_file);
        return 0;
    }
    memset(linedatabuf,0,100);
    TempInsertCount=0;
      //  while (fgets((char *)linedatabuf, sizeof(linedatabuf), fp_file))
    while (!feof(fp_file))
    {
        fgets((char *)linedatabuf, sizeof(linedatabuf), fp_file);
        if(feof(fp_file))
        {
                     //at the end of file ,stopping get historyrecord
               startInsertFlag=0;
            break;
        }

        readLen=strlen((char *)linedatabuf);
        if(readLen<=3)
        {
            continue;
        }


        //please tar the string buf for your struct
        //tile of the text
        //printf("####read linenumber=%d,%s\r\n",linetotal,linedatabuf);
        if( linedatabuf[startpos]=='i'&& linedatabuf[startpos+1]=='d'&&linedatabuf[startpos+2]=='x')
        {
            continue;
        }
        if( linedatabuf[startpos]=='#'&& linedatabuf[startpos+1]=='#'&&linedatabuf[startpos+2]=='#')
        {
            continue;
        }
           linetotal++;

        memset(SectionBuf,0,50);
        Sectionindex=0;
        SectiondataPos=0;
        for(startpos=0;startpos<readLen;startpos++)
        {

            if(linedatabuf[startpos]==0x0d||linedatabuf[startpos]==0x0a)
            {
                //break;
                continue;
            }
            if(linedatabuf[startpos]==0x7c)//"|"
            {
                     // printf("1111111111111\r\n");
                if(Sectionindex==0)//record index
                {
                    tempeventtype=atoi((char *)SectionBuf);
                    if(tempeventtype== 1)//find the startindex wo need
                    {
                      // tempWaring.index=linetotal;
                        //add by mj_1_29
                        num_add++;
                        tempWaring.index=num_add;
                       //tempWaring.type_inquire=tempeventtype;
                       startInsertFlag=1;
                    }
                    else
                    {
                        startInsertFlag=0;
                        continue;
                    }

                // printf("%d\r\n",tempHistoryRecord.RecordIndex);
                }
                else if(Sectionindex==1)//record index
                {
                    tempWaring.modnum=atoi((char *)SectionBuf);
                }
                else if(Sectionindex==2)//record index
                {
                    //tempWaring.errcode=atoi((char *)SectionBuf);
                    strcat((char *)SectionBuf,"-");
                    TimeAnanisis(&tempWaring.OccurTm,SectionBuf);

                }
                else if(Sectionindex==3)//errcode
                {
                       tempWaring.errcode=atoi((char *)SectionBuf);
                }

                memset(SectionBuf,0,50);
                SectiondataPos=0;
                Sectionindex++;
                continue;
            }//end of if(linedatabuf[startpos]==0x7c)//"|"
            else
            {
                          if(SectiondataPos<50)
                            {
                                  SectionBuf[SectiondataPos++]=linedatabuf[startpos];
                            }

            }

       }//end of for(startpos=0;startpos<readLen;startpos++)

        Sectionindex=0;
        // printf("\r\n");
        memset(linedatabuf,0,100);
        if(startInsertFlag==1&&TempInsertCount<500)//start insert history
        {
                memcpy(&partbuf_0x97_OutPt[TempInsertCount],&tempWaring,sizeof(struct _partbuf_0x97));
                //partbuf_0x96_OutPt[TempEventInsertCount].RecordIndex=linetotal;
                TempInsertCount++;
        }//end of  if(startInsertFlag==1)//start insert history
        memset(&tempWaring,0,sizeof(struct _partbuf_0x97));

    }//end of  while (fgets(linedatabuf, sizeof(linedatabuf), fp_file))

    fclose(fp_file);
    return TempInsertCount;
}

int   Err_local_analysis(int error_state_flag)
{
    if(language_num == 1)
    {
        local_tempadd_sub2 = 0;
        if( (error_state_flag & (1<<0)) || (error_state_flag &(1<<24)) || (error_state_flag & (1<<1))  || (error_state_flag & (1<<25)) )
        {
            memcpy(&local_tempsub2_buf[local_tempadd_sub2++],"读 卡 器 故 障",sizeof("读 卡 器 故 障"));
        }
        if( (error_state_flag & (1<<20)) )
        {
            memcpy(&local_tempsub2_buf[local_tempadd_sub2++],"电 表 通 讯 故 障",sizeof("电 表 通 讯 故 障"));
        }
        if( (error_state_flag & (1<<3)) )
        {
            memcpy(&local_tempsub2_buf[local_tempadd_sub2++],"显 示 屏 通 讯 故 障",sizeof("显 示 屏 通 讯 故 障"));
        }
        if( (error_state_flag & (1<<8)) )
        {
            memcpy(&local_tempsub2_buf[local_tempadd_sub2++],"主 板 软 件 故 障",sizeof("主 板 软 件 故 障"));
        }
        if( (error_state_flag & (1<<21)) )
        {
            memcpy(&local_tempsub2_buf[local_tempadd_sub2++],"急停按钮被按下,请恢复",sizeof("急停按钮被按下,请恢复"));
        }
        if( (error_state_flag & (1<<7)) )
        {
            memcpy(&local_tempsub2_buf[local_tempadd_sub2++],"主 板 硬 件 故 障",sizeof("主 板 硬 件 故 障"));
        }
        if( (error_state_flag & (1<<4)) ||(error_state_flag & (1<<5)))
        {
            memcpy(&local_tempsub2_buf[local_tempadd_sub2++],"交流接触器故障",sizeof("交流接触器故障"));
        }
        if( (error_state_flag & (1<<10)) )
        {
            memcpy(&local_tempsub2_buf[local_tempadd_sub2++],"模块通讯故障",sizeof("模块通讯故障"));
        }
        if( (error_state_flag & (1<<30)) )
        {
            memcpy(&local_tempsub2_buf[local_tempadd_sub2++],"输入过压",sizeof("输入过压"));
        }
        if( (error_state_flag & (1<<31)) )
        {
            memcpy(&local_tempsub2_buf[local_tempadd_sub2++],"输入欠压",sizeof("输入欠压"));
        }
        if( (error_state_flag & (1<<18)) )
        {
            memcpy(&local_tempsub2_buf[local_tempadd_sub2++],"电磁锁故障",sizeof("电磁锁故障"));
        }
        if( (error_state_flag & (1<<11)) )
        {
            memcpy(&local_tempsub2_buf[local_tempadd_sub2++],"数据传输错误",sizeof("数据传输错误"));
        }
        if( (error_state_flag & (1<<12)) )
        {
            memcpy(&local_tempsub2_buf[local_tempadd_sub2++],"输出过流",sizeof("输出过流"));
        }
        if( (error_state_flag & (1<<13)) )
        {
            memcpy(&local_tempsub2_buf[local_tempadd_sub2++],"输出短路",sizeof("输出短路"));
        }
        if( (error_state_flag & (1<<14)) )
        {
            memcpy(&local_tempsub2_buf[local_tempadd_sub2++],"出风口温度过高",sizeof("出风口温度过高"));
        }
        if( (error_state_flag & (1<<15)) )
        {
            memcpy(&local_tempsub2_buf[local_tempadd_sub2++],"存储器已满",sizeof("存储器已满"));
        }
        if( (error_state_flag & (1<<23)) )
        {
            memcpy(&local_tempsub2_buf[local_tempadd_sub2++],"网 络 连 接 故 障",sizeof("网 络 连 接 故 障"));
        }
    }
    else  if(language_num == 2)
    {

        local_tempadd_sub2 = 0;
        if( (error_state_flag & (1<<0)) || (error_state_flag &(1<<24)) || (error_state_flag & (1<<1))  || (error_state_flag & (1<<25)) )
        {
            memcpy(&local_tempsub2_buf[local_tempadd_sub2++],"card reader error",sizeof("card reader error"));
        }
        if( (error_state_flag & (1<<20)) )
        {
            memcpy(&local_tempsub2_buf[local_tempadd_sub2++],"meter error",sizeof("meter error"));
        }
        if( (error_state_flag & (1<<8)) )
        {
            memcpy(&local_tempsub2_buf[local_tempadd_sub2++],"software in board error",sizeof("software in board error"));
        }
        if( (error_state_flag & (1<<21)) )
        {
            memcpy(&local_tempsub2_buf[local_tempadd_sub2++],"emergency is pressed,please recover it",sizeof("emergency is pressed,please recover it"));
        }
        if( (error_state_flag & (1<<7)) )
        {
            memcpy(&local_tempsub2_buf[local_tempadd_sub2++],"hardware in board error",sizeof("hardware in board error"));
        }
        if( (error_state_flag & (1<<4)) ||(error_state_flag & (1<<5)))
        {
            memcpy(&local_tempsub2_buf[local_tempadd_sub2++],"ac contactor error",sizeof("ac contactor error"));
        }
        if( (error_state_flag & (1<<23)) )
        {
            memcpy(&local_tempsub2_buf[local_tempadd_sub2++],"net link error",sizeof("net link error"));
        }
    }
    else
    {

    }
    return local_tempadd_sub2;
}

char* dialog_local_err::itos(struct SYNCHRO_TIME  time)
{
    memset(local_temperr_array,0,sizeof(local_temperr_array));
    snprintf(local_temperr_array,50,"%4d-%02d-%02d %02d:%02d:%02d",time.uwYear,time.ucMonth,time.ucDay,time.ucHour,time.ucMinute,time.ucSecond);
    char *temp = local_temperr_array;
    return temp;
}
